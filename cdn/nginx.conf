worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
   
    upstream backend {
        server load_balancer:8080;
    }

    upstream s3_backend {
        server s3:4566;  # LocalStack S3 service
    }

    # Define the proxy cache path and keys
    proxy_cache_path /tmp/cache levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;

    # Define a shared memory zone for rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=100r/s;

    server {
        listen 80;
        server_name _;

        location / {
            # Apply rate limiting
            limit_req zone=one burst=20 nodelay;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Enable caching for all GET requests
            proxy_cache my_cache;
            proxy_cache_methods GET;
            proxy_cache_min_uses 1;
            proxy_cache_valid 200 302 10s;
            proxy_cache_valid 404 1m;

            # If this is missing, for authorized requests same response will be cached for all users
            proxy_cache_bypass $http_authorization;
            
            add_header X-CDN-Cache-Status $upstream_cache_status;

            # Use stale-while-revalidate to serve stale content while updating
            proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
            # Only first request will be allowed to origin, all other requests will be served from cache
            proxy_cache_background_update on;
            proxy_cache_lock on;

            # Hide specific headers from proxied responses
            proxy_hide_header X-Powered-By;
            proxy_hide_header X-Proxy-Cache-Status;
        }

        # Serve static files directly from the server
        # With CDN this could be served from S3 or similar
        location /static/ {
            root /usr/local/openresty/nginx/html;
            try_files $uri $uri/ =404;
        }

        location /s3/ {
            proxy_pass http://s3_backend/my-local-bucket/;

            # Preserve original headers and ensure correct handling by browser
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Add these headers to ensure correct behavior
            proxy_hide_header Content-Disposition; # Prevent forced download
            add_header Content-Disposition 'inline' always; # Ensure files are displayed
        }


        # Optional: serve static files directly from cache
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            proxy_pass http://backend;
            proxy_cache my_cache;
            proxy_cache_methods GET;
            add_header X-CDN-Cache-Status $upstream_cache_status;
        }
    }
}
