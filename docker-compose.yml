version: '3'
services:
  api:
    build: ./api   
    environment:
      - PORT=3000
      # - CACHE=local
      - CACHE=redis
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - PG_USER=postgres
      - PG_PASSWORD=mysecretpassword
      - PG_HOST=db
      - PG_PORT=5432
      - PG_DATABASE=securing-api
    # Docker doesn't support dynamic ports for each replica out-of-the-box
    ports:
      - "3000:3000"
    deploy:
      replicas: 1
    networks:
      - my_company_network
    # Comment volumes and command if prefer to use "production" system
    volumes:
      - ./api:/usr/src/app        # Mount local code to container
      - /usr/src/app/node_modules # Prevent node_modules from being overwritten
    command: npm run start        # Start with nodemon
    depends_on:
      # use service_started instead of service_healthy to speed up the startup
      db:
        condition: service_started
      # cache:
      #   condition: service_started
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1
      start_period: 10s
      interval: 30s
      timeout: 2s
      retries: 10
  db:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=securing-api
    ports:
      - '5432:5432'
    networks:
      - my_company_network
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init/replication.sql:/docker-entrypoint-initdb.d/00_replication.sql
      - ./db/init/products.sql:/docker-entrypoint-initdb.d/01_products.sql
      - ./db/init/orders.sql:/docker-entrypoint-initdb.d/02_orders.sql
      - ./db/init/messages.sql:/docker-entrypoint-initdb.d/03_messages.sql
      - ./db/conf/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./db/conf/postgresql.conf:/etc/postgresql/postgresql.conf
    command: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 2s
      retries: 10

networks:
  my_company_network:

volumes:
  cache:
    driver: local
  db-data:
  db-replica-data: