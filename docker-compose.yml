version: '3'
services:
  api:
    build: ./api   
    environment:
      - PORT=3000
      # - CACHE=local
      - CACHE=redis
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - PG_USER=postgres
      - PG_PASSWORD=mysecretpassword
      - PG_HOST=db
      - PG_PORT=5432
      - PG_DATABASE=securing-api
    # Docker doesn't support dynamic ports for each replica out-of-the-box
    # ports:
    #   - "3000:3000"
    deploy:
      replicas: 2
    networks:
      - my_company_network
    # Comment volumes and command if prefer to use "production" system
    volumes:
      - ./api:/usr/src/app        # Mount local code to container
      - /usr/src/app/node_modules # Prevent node_modules from being overwritten
    command: npm run start        # Start with nodemon
    depends_on:
      # use service_started instead of service_healthy to speed up the startup
      db:
        condition: service_started
      cache:
        condition: service_started
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1
      start_period: 10s
      interval: 30s
      timeout: 2s
      retries: 10
  db:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=securing-api
    ports:
      - '5432:5432'
    networks:
      - my_company_network
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init/replication.sql:/docker-entrypoint-initdb.d/00_replication.sql
      - ./db/init/products.sql:/docker-entrypoint-initdb.d/01_products.sql
      - ./db/init/orders.sql:/docker-entrypoint-initdb.d/02_orders.sql
      - ./db/init/messages.sql:/docker-entrypoint-initdb.d/03_messages.sql
      - ./db/conf/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./db/conf/postgresql.conf:/etc/postgresql/postgresql.conf
    command: ["-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 2s
      retries: 10
  db-replica:
    image: postgres:16.4-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=securing-api
      - PGUSER=replicator
      - PGPASSWORD=replicator_password
    ports:
      - '5433:5432'
    networks:
      - my_company_network
    volumes:
      - db-replica-data:/var/lib/postgresql/data
    user: postgres  # Run everything as the postgres user
    command: |
      bash -c "
      # NOTE: Ensure the data directory is empty before starting replication.
      # The data directory is cleared automatically at the start of the replica setup.
      rm -rf /var/lib/postgresql/data/*
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=db --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'

      chmod 0700 /var/lib/postgresql/data
      # Set listen_addresses to allow connections from all interfaces
      echo \"listen_addresses='*'\" >> /var/lib/postgresql/data/postgresql.conf
      
      # Allow connections from the host in pg_hba.conf
      echo \"host all all 0.0.0.0/0 md5\" >> /var/lib/postgresql/data/pg_hba.conf
      
      postgres
      "
    depends_on:
      - db
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - cache:/data
    networks:
      - my_company_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 2s
      retries: 10
  load_balancer:
    build: ./load_balancer
    ports:
      - "8080:8080"
    networks:
      - my_company_network
    volumes:
      - ./load_balancer/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      api:
        condition: service_started
  cdn:
    build: 
      context: ./cdn
      # dockerfile: Dockerfile
      dockerfile: Dockerfile-waf
    ports:
      - "80:80"
    networks:
      - my_company_network
    volumes:
        # - ./cdn/nginx.conf:/etc/nginx/nginx.conf  # Use this with CDN without WAF
        - ./cdn/nginx-waf.conf:/etc/nginx/conf.d/nginx-waf.conf  # Use this with WAF image
        - ./cdn/static:/usr/share/nginx/html/static
    depends_on:
      load_balancer:
        condition: service_started
      s3:
        condition: service_started
  s3:
    image: localstack/localstack:latest
    environment:
      - SERVICES=s3
      - DEBUG=1
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    ports:
      - "4566:4566"
      - "4572:4572"
    volumes:
      - "./s3/setup/init-s3.py:/etc/localstack/init/ready.d/init-s3.py"
      - "./s3/data:/tmp/data"
    networks:
      - my_company_network

networks:
  my_company_network:

volumes:
  cache:
    driver: local
  db-data:
  db-replica-data: